AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >
  python3.9
  prueba mlops

Parameters:
  Env:
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
    Default: dev

Globals:
  Function:
    Timeout: 30
    Environment:
      Variables:
        Env: !Ref Env

Resources:

  DeadLetterStandardQueue: 
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    Properties: 
      QueueName: !Sub deadLetterQueue-${Env}
      MessageRetentionPeriod: 1209600 
      Tags:
          - Key: "env"
            Value: !Ref Env
  DeadLetterFifoQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    Properties: 
      QueueName: !Sub "deadLetterQueue${Env}.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 1209600 
      Tags:
          - Key: "env"
            Value: !Ref Env

  AsyncQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete 
    Properties:
      QueueName: !Sub inference-${Env}
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt DeadLetterStandardQueue.Arn
        maxReceiveCount: 1
        
      Tags:
        - Key: "env"
          Value: !Ref Env

  FifoQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    Properties:
      QueueName: !Sub "inference_${Env}.fifo"
      FifoQueue: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterFifoQueue.Arn
        maxReceiveCount: 1
      Tags:
        - Key: "env"
          Value: !Ref Env

  ModelFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub inferencceFunction-${Env}
      PackageType: Image
      Architectures:
        - x86_64
      Description: >
        Call to pytorch model
      Tags:
        env: !Ref Env
      Events:
        AsyncEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AsyncQueue.Arn
            BatchSize: 1
        SyncSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt FifoQueue.Arn
            BatchSize: 1
      Policies:
        - Statement:
            - Sid: WriteDynamo
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: "*"
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: function/
      DockerTag: python3.9

  resultsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete 
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: !Sub results-${Env}
      Tags:
        - Key: "env"
          Value: !Ref Env

  InvocationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Invocation alarm for my AWS Lambda
      AlarmActions:
        - !Ref InvocationAlarmSNSTopic
      Namespace: AWS/Lambda
      MetricName: Invocations
      Dimensions:
        - Name: FunctionName
          Value: !Ref ModelFunction
      Statistic: Sum
      ComparisonOperator: LessThanThreshold
      Threshold: 1
      EvaluationPeriods: 1
      Period: 86400
      TreatMissingData: breaching
      

  InvocationAlarmSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "innaki.gorostiaga@gmail.com"
          Protocol: email

Outputs:  
  DeadLetterQueue:
    Description: DeadLetterStandardQueue
    Value: !Ref DeadLetterStandardQueue
  DeadLetterQueueFIO:
    Description: DeadLetterFifoQueue
    Value: !Ref DeadLetterFifoQueue
  AsyncQueue:
    Description: Fifo
    Value: !Ref AsyncQueue
  FifoQueue:
    Description: Queue
    Value: !Ref FifoQueue
  Function:
    Description: Function
    Value: !Ref ModelFunction
  DDB:
    Description: Dynamo Table
    Value: !Ref resultsTable
